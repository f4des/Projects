## Divisible by 10 ##
def divisible_by_ten(nums):
  count = 0
  for x in nums:
    if x % 10 == 0:
      count += 1
    else:
      continue
  return count

print(divisible_by_ten([20, 25, 30, 35, 40]))

## Greetings ##

def add_greetings(names):
  all_names = []
  for x in names:
    all_names.append("Hello, " + x)
  return all_names

print(add_greetings(["Owen", "Max", "Sophie"]))

## Odd Indices ##
def odd_indices(lst):
  new_list = []
  for index in range(1, len(lst), 2):
    new_list.append(lst[index])
  return new_list


print(odd_indices([4, 3, 7, 10, 11, -2]))

## Exponents ##
def exponents(bases, powers):
  nums = []
  for base in bases:
    for power in powers:
      nums.append(base ** power)

  return nums

print(exponents([2, 3, 4], [1, 2, 3]))

## Larger Sum ##

def larger_sum(lst1, lst2):
  sum1 = 0
  sum2 = 0
  for num1 in lst1:
    sum1 += num1
  for num2 in lst2:
    sum2 += num2
  if sum2 > sum1:
    return lst2
  else:
    return lst1


print(larger_sum([1, 9, 5], [2, 3, 7]))

## OVer 9000 ##

def over_nine_thousand(lst):
  total = 0
  if len(lst) != 0:
    for x in lst:
      total += x
      if total > 9000:
        break
  return total


print(over_nine_thousand([8000, 900, 120, 5000]))

## Max Num ##

def max_num(nums):
  nums.sort()
  return nums[-1]

print(max_num([50, -10, 0, 75, 20]))

# Using loops instead
def max_num(nums):
  maximum = nums[0]
  for x in nums:
    if x > maximum:
      maximum = x
  return maximum

## Same Values ##

def same_values(lst1, lst2):
  new_list = []
  for idx in range(len(lst1)):
    if lst1[idx] == lst2[idx]:
      new_list.append(idx)
  return new_list


print(same_values([5, 1, -10, 3, 3], [5, 10, -10, 3, 5]))

## Reversed List ##

#Write your function here
def reversed_list(lst1, lst2):
  x = lst2
  i = 0
  y = 0
  while i + 1 <= len(x) // 2:
    a, b = x[i], x[-(i + 1)]
    x[i], x[-(i + 1)] = b, a
    i += 1
  if lst1 == x:
    return True
  else:
    return False

print(reversed_list([1, 2, 3], [3, 2, 1]))
print(reversed_list([1, 5, 3], [3, 2, 1]))
